{"ast":null,"code":"import _toConsumableArray from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { MOSTRAR_PRODUCTOS, ELIMINAR_PRODUCTO, AGREGAR_PRODUCTO, EDITAR_PRODUCTO, MOSTRAR_PRODUCTO } from '../actions/types'; // cada reducer tiene su propio state\n\nvar initialState = {\n  productos: []\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // GET\n    // tomamos la respuesta del servidor y la metemos en el state\n    case MOSTRAR_PRODUCTOS:\n      return _objectSpread({}, state, {\n        productos: action.payload // DELETE\n        // tomamos el id del post y lo borramos del state\n\n      });\n\n    case ELIMINAR_PRODUCTO:\n      return _objectSpread({}, state, {\n        // buscamos ese id en el state y lo borramos\n        // devolveme todos menos ese que borraste\n        productos: state.productos.filter(function (producto) {\n          return producto.id !== action.payload;\n        }) // POST\n        // agregamos un producto a la base de datos\n\n      });\n\n    case AGREGAR_PRODUCTO:\n      return _objectSpread({}, state, {\n        // el action.payload viene con la informacion del post\n        productos: [].concat(_toConsumableArray(state.productos), [action.payload]) // GET\n        // mostramos solo un producto del state\n\n      });\n\n    case MOSTRAR_PRODUCTO:\n      return _objectSpread({}, state, {\n        // en singular para que no reescriba todo el state\n        producto: action.payload // PUT\n        // editamos o actualizamos la informacion del post mostrado\n\n      });\n\n    case EDITAR_PRODUCTO:\n      return _objectSpread({}, state, {\n        // recorremos todo el state\n        productos: state.productos.map( // le pasamos al state el objeto con el id a editar \n        // si los id de ambos coinciden\n        function (producto) {\n          return producto.id === action.payload.id // Si hay cambios actualizamos sino se queda el post como esta\n          ? producto = action.payload : producto;\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/reduxcrud/src/reducers/productosReducers.js"],"names":["MOSTRAR_PRODUCTOS","ELIMINAR_PRODUCTO","AGREGAR_PRODUCTO","EDITAR_PRODUCTO","MOSTRAR_PRODUCTO","initialState","productos","state","action","type","payload","filter","producto","id","map"],"mappings":";;AAAA,SAASA,iBAAT,EACSC,iBADT,EAESC,gBAFT,EAGSC,eAHT,EAISC,gBAJT,QAIgC,kBAJhC,C,CAMA;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAC;AADO,CAArB;AAKA,eAAe,YAAsC;AAAA,MAA7BC,KAA6B,uEAArBF,YAAqB;AAAA,MAAPG,MAAO;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI;AACA;AACA,SAAKT,iBAAL;AACI,+BACOO,KADP;AAEID,QAAAA,SAAS,EAACE,MAAM,CAACE,OAFrB,CAIJ;AACA;;AALI;;AAMJ,SAAKT,iBAAL;AACI,+BACOM,KADP;AAEI;AACA;AACAD,QAAAA,SAAS,EAAEC,KAAK,CAACD,SAAN,CAAgBK,MAAhB,CAAuB,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,EAAT,KAAgBL,MAAM,CAACE,OAA3B;AAAA,SAA/B,CAJf,CAMJ;AACA;;AAPI;;AAQJ,SAAKR,gBAAL;AACI,+BACOK,KADP;AAEI;AACAD,QAAAA,SAAS,+BAAMC,KAAK,CAACD,SAAZ,IAAuBE,MAAM,CAACE,OAA9B,EAHb,CAKJ;AACA;;AANI;;AAOJ,SAAKN,gBAAL;AACI,+BACOG,KADP;AAEI;AACAK,QAAAA,QAAQ,EAAEJ,MAAM,CAACE,OAHrB,CAKJ;AACA;;AANI;;AAOJ,SAAKP,eAAL;AACI,+BACOI,KADP;AAEI;AACAD,QAAAA,SAAS,EAACC,KAAK,CAACD,SAAN,CAAgBQ,GAAhB,EACN;AACA;AACA,kBAAAF,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,EAAT,KAAgBL,MAAM,CAACE,OAAP,CAAeG,EAA/B,CACR;AADQ,YAELD,QAAQ,GAAGJ,MAAM,CAACE,OAFb,GAGNE,QAHE;AAAA,SAHF;AAHd;;AAYJ;AACI,aAAOL,KAAP;AAjDR;AAmDH","sourcesContent":["import { MOSTRAR_PRODUCTOS,\n         ELIMINAR_PRODUCTO,\n         AGREGAR_PRODUCTO,\n         EDITAR_PRODUCTO, \n         MOSTRAR_PRODUCTO} from '../actions/types';\n\n// cada reducer tiene su propio state\nconst initialState = {\n    productos:[]\n}\n\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        // GET\n        // tomamos la respuesta del servidor y la metemos en el state\n        case MOSTRAR_PRODUCTOS:\n            return {\n                ...state,\n                productos:action.payload\n            }\n        // DELETE\n        // tomamos el id del post y lo borramos del state\n        case ELIMINAR_PRODUCTO:\n            return {\n                ...state,\n                // buscamos ese id en el state y lo borramos\n                // devolveme todos menos ese que borraste\n                productos: state.productos.filter(producto => producto.id !== action.payload)\n            }\n        // POST\n        // agregamos un producto a la base de datos\n        case AGREGAR_PRODUCTO:\n            return {\n                ...state,\n                // el action.payload viene con la informacion del post\n                productos: [...state.productos, action.payload]\n            }\n        // GET\n        // mostramos solo un producto del state\n        case MOSTRAR_PRODUCTO:\n            return{\n                ...state,\n                // en singular para que no reescriba todo el state\n                producto: action.payload\n            }\n        // PUT\n        // editamos o actualizamos la informacion del post mostrado\n        case EDITAR_PRODUCTO:\n            return{\n                ...state,\n                // recorremos todo el state\n                productos:state.productos.map(\n                    // le pasamos al state el objeto con el id a editar \n                    // si los id de ambos coinciden\n                    producto => producto.id === action.payload.id \n                        // Si hay cambios actualizamos sino se queda el post como esta\n                        ? (producto = action.payload)\n                        : producto\n                )\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}