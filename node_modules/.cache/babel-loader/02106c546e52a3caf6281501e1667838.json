{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/GitHub/reduxcrud/src/components/EditarProducto.js\";\nimport React, { Component } from 'react'; // redux \n\nimport { connect } from 'react-redux';\nimport { mostrarProducto, editarProducto } from '../actions/productosActions';\n\nvar EditarProducto =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditarProducto, _Component);\n\n  function EditarProducto() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditarProducto);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditarProducto)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      nombre: '',\n      precio: '',\n      error: false // cargo la data en el componente para poderla editar\n\n    };\n\n    _this.nombreProducto = function (e) {\n      _this.setState({\n        nombre: e.target.value\n      });\n    };\n\n    _this.precioProducto = function (e) {\n      _this.setState({\n        precio: e.target.value\n      });\n    };\n\n    _this.actualizarProducto = function (e) {\n      // para que no recargue la página\n      e.preventDefault(); // leemos los valores almacenamos en el state\n\n      var _this$state = _this.state,\n          nombre = _this$state.nombre,\n          precio = _this$state.precio; // validamos los campos\n\n      if (nombre === '' || precio === '') {\n        _this.setState({\n          error: true\n        });\n\n        return;\n      }\n\n      _this.setState({\n        error: false\n      });\n\n      var id = _this.props.match.params.id; // creamos el objeto\n\n      var productoEditado = {\n        id: id,\n        nombre: nombre,\n        precio: precio // actualizamos el producto actual\n\n      };\n\n      _this.props.editarProducto(productoEditado); // redireccionamos al home\n\n\n      _this.props.history.push('/');\n    };\n\n    return _this;\n  }\n\n  _createClass(EditarProducto, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // asi accedemos al id actual del post a editar\n      //console.log(this.props.match.params);\n      var id = this.props.match.params.id;\n      this.props.mostrarProducto(id);\n    } // cuando se pasen los props en este componente se ejecuta esta función\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextState) {\n      // estos son los props que llegan al componente\n      // console.log(nextProps);\n      var _nextProps$producto = nextProps.producto,\n          nombre = _nextProps$producto.nombre,\n          precio = _nextProps$producto.precio; // llenamos el state porque esta vacio\n\n      this.setState({\n        nombre: nombre,\n        precio: precio\n      });\n    } // leemos el campo y lo guardamos en el state\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          nombre = _this$state2.nombre,\n          precio = _this$state2.precio,\n          error = _this$state2.error;\n      return React.createElement(\"div\", {\n        className: \"row justify-content-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Agregar Nuevo Producto\"), React.createElement(\"form\", {\n        onSubmit: this.actualizarProducto,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Titulo\"), React.createElement(\"input\", {\n        defaultValue: nombre,\n        onChange: this.nombreProducto,\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Titulo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Precio del Producto\"), React.createElement(\"input\", {\n        defaultValue: precio,\n        onChange: this.precioProducto,\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Precio\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary font-weight-bold text-uppercase d-block w-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Guardar Cambios\")), error && React.createElement(\"div\", {\n        className: \"font-weight-bold alert alert-danger text-center mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \" \\xBFQu\\xE9 producto voy a crear si tengo alg\\xFAn campo vacio?\")))));\n    }\n  }]);\n\n  return EditarProducto;\n}(Component); // state\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    producto: state.productos.producto\n  };\n};\n\nexport default connect(mapStateToProps, {\n  mostrarProducto: mostrarProducto,\n  editarProducto: editarProducto\n})(EditarProducto);","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/reduxcrud/src/components/EditarProducto.js"],"names":["React","Component","connect","mostrarProducto","editarProducto","EditarProducto","state","nombre","precio","error","nombreProducto","e","setState","target","value","precioProducto","actualizarProducto","preventDefault","id","props","match","params","productoEditado","history","push","nextProps","nextState","producto","mapStateToProps","productos"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\n// redux \nimport { connect } from 'react-redux';\nimport { mostrarProducto, editarProducto } from '../actions/productosActions';\n\nclass EditarProducto extends Component {\n\n    // manejamos un state local en este componente \n    // para llenar los campos con la data que responde la api\n    state = {\n        nombre: '',\n        precio: '',\n        error: false\n    }\n\n    // cargo la data en el componente para poderla editar\n    componentDidMount(){\n        // asi accedemos al id actual del post a editar\n        //console.log(this.props.match.params);\n        const { id } = this.props.match.params;\n        this.props.mostrarProducto(id);\n    }\n\n    // cuando se pasen los props en este componente se ejecuta esta función\n    componentWillReceiveProps(nextProps, nextState){\n        // estos son los props que llegan al componente\n        // console.log(nextProps);\n\n        const {nombre, precio } = nextProps.producto;\n        // llenamos el state porque esta vacio\n        this.setState({\n            nombre, \n            precio\n        });\n    }\n\n    // leemos el campo y lo guardamos en el state\n    nombreProducto = e => {\n        this.setState({ nombre: e.target.value })\n    }\n\n    // leemos el campo y lo guardamos en el state\n    precioProducto = e => {\n        this.setState({ precio: e.target.value })\n    }\n\n    actualizarProducto = e => {\n        // para que no recargue la página\n        e.preventDefault();\n\n        // leemos los valores almacenamos en el state\n        const {nombre, precio} = this.state;\n\n        // validamos los campos\n        if(nombre === '' || precio === ''){\n            this.setState({ error: true });\n            return;\n        } \n        this.setState({ error:false });\n\n        const { id } = this.props.match.params;\n\n        // creamos el objeto\n        let productoEditado = {\n            id,\n            nombre,\n            precio\n        }\n        // actualizamos el producto actual\n        this.props.editarProducto(productoEditado);\n\n        // redireccionamos al home\n        this.props.history.push('/');\n    }\n\n\n    render(){\n        const {nombre, precio, error} = this.state;\n        return(\n            <div className=\"row justify-content-center mt-5\">\n                <div className=\"col-md-8\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h2 className=\"text-center\">Agregar Nuevo Producto</h2>\n                            <form onSubmit={this.actualizarProducto}>\n                                <div className=\"form-group\">\n                                    <label>Titulo</label>\n                                    <input defaultValue={nombre} onChange={this.nombreProducto} type=\"text\" className=\"form-control\" placeholder=\"Titulo\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Precio del Producto</label>\n                                    <input defaultValue={precio} onChange={this.precioProducto} type=\"text\" className=\"form-control\" placeholder=\"Precio\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary font-weight-bold text-uppercase d-block w-100\">Guardar Cambios</button>\n                            </form>\n                            {/* En caso de que el state este en true (campos del formulario vacios, le hacemos buying al usuario) */}\n                            {\n                                error && \n                                <div className=\"font-weight-bold alert alert-danger text-center mt-4\"> ¿Qué producto voy a crear si tengo algún campo vacio?</div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// state\nconst mapStateToProps = state => ({\n    producto: state.productos.producto\n})\n\nexport default connect(mapStateToProps, { mostrarProducto, editarProducto })(EditarProducto);"]},"metadata":{},"sourceType":"module"}