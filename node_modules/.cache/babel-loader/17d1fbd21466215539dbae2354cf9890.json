{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/Documents/GitHub/reduxcrud/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MOSTRAR_PRODUCTOS, MOSTRAR_PRODUCTO, ELIMINAR_PRODUCTO, AGREGAR_PRODUCTO, EDITAR_PRODUCTO } from './types';\nimport axios from 'axios'; // GET\n// action de mostrar todos los productos\n// esta action solo sirve todos los datos\n\nexport var mostrarProductos = function mostrarProductos() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var respuesta;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get('http://localhost:5000/productos');\n\n              case 2:\n                respuesta = _context.sent;\n                dispatch({\n                  type: MOSTRAR_PRODUCTOS,\n                  payload: respuesta.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; // DELETE\n// action para borrar un post\n// esta action recibe como parametro un id del post a borrar\n\nexport var borrarProducto = function borrarProducto(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.delete(\"http://localhost:5000/productos/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: ELIMINAR_PRODUCTO,\n                  // le pasamos el id al state para que lo elimine\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; // POST\n// action para agregar producto\n// esta action recibe un post con todos los datos para agregarlos a la api\n\nexport var agregarProducto = function agregarProducto(post) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var respuesta;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.post(\"http://localhost:5000/productos\", post);\n\n              case 2:\n                respuesta = _context3.sent;\n                dispatch({\n                  type: AGREGAR_PRODUCTO,\n                  payload: respuesta.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; // GET\n// action para mostrar un solo post\n// esta action recibe como parametro un id del post a mostrar\n\nexport var mostrarProducto = function mostrarProducto(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var respuesta;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get(\"http://localhost:5000/productos/\".concat(id));\n\n              case 2:\n                respuesta = _context4.sent;\n                dispatch({\n                  type: MOSTRAR_PRODUCTO,\n                  payload: respuesta.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; // PUT\n// action para editar un post\n// esta action recibe el objeto con todos los datos\n\nexport var editarProducto = function editarProducto(producto) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        var respuesta;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return axios.put(\"http://localhost:5000/productos/\".concat(producto.id), producto);\n\n              case 2:\n                respuesta = _context5.sent;\n                dispatch({\n                  type: EDITAR_PRODUCTO,\n                  payload: respuesta.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/mac/Documents/GitHub/reduxcrud/src/actions/productosActions.js"],"names":["MOSTRAR_PRODUCTOS","MOSTRAR_PRODUCTO","ELIMINAR_PRODUCTO","AGREGAR_PRODUCTO","EDITAR_PRODUCTO","axios","mostrarProductos","dispatch","get","respuesta","type","payload","data","borrarProducto","id","delete","agregarProducto","post","mostrarProducto","editarProducto","producto","put"],"mappings":"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","sourcesContent":["import { MOSTRAR_PRODUCTOS,\n         MOSTRAR_PRODUCTO,\n         ELIMINAR_PRODUCTO,\n         AGREGAR_PRODUCTO,\n         EDITAR_PRODUCTO} from './types';\n\nimport axios from 'axios';\n\n// GET\n// action de mostrar todos los productos\n// esta action solo sirve todos los datos\nexport const mostrarProductos = () => async dispatch => {\n    const respuesta = await axios.get('http://localhost:5000/productos');\n    dispatch({\n        type: MOSTRAR_PRODUCTOS,\n        payload: respuesta.data\n    })\n}\n\n// DELETE\n// action para borrar un post\n// esta action recibe como parametro un id del post a borrar\nexport const borrarProducto = id => async dispatch => {\n    // json server requiere el id para poder borrar algun post\n    await axios.delete(`http://localhost:5000/productos/${id}`);\n    dispatch({\n        type: ELIMINAR_PRODUCTO,\n        // le pasamos el id al state para que lo elimine\n        payload: id\n    }) \n}\n\n// POST\n// action para agregar producto\n// esta action recibe un post con todos los datos para agregarlos a la api\nexport const agregarProducto = post => async dispatch => {\n    // hacemos post a la api con a info que queremos insertar\n    const respuesta = await axios.post(`http://localhost:5000/productos`, post);\n    dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: respuesta.data\n    })\n}\n\n// GET\n// action para mostrar un solo post\n// esta action recibe como parametro un id del post a mostrar\nexport const mostrarProducto = id => async dispatch => {\n    // hacemos post a la api con a info que queremos editar\n    const respuesta = await axios.get(`http://localhost:5000/productos/${id}`);\n    dispatch({\n        type: MOSTRAR_PRODUCTO,\n        payload: respuesta.data\n    })\n}\n\n// PUT\n// action para editar un post\n// esta action recibe el objeto con todos los datos\nexport const editarProducto = producto => async dispatch => {\n    const respuesta = await axios.put(`http://localhost:5000/productos/${producto.id}`, producto);\n    dispatch({\n        type: EDITAR_PRODUCTO,\n        payload: respuesta.data\n    })\n}\n "]},"metadata":{},"sourceType":"module"}