{"version":3,"sources":["reducers/productosReducers.js","reducers/index.js","actions/types.js","store.js","components/Header.js","components/EditarProducto.js","actions/productosActions.js","components/Producto.js","components/Productos.js","components/NuevoProducto.js","App.js","serviceWorker.js","index.js"],"names":["initialState","productos","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","payload","filter","producto","id","concat","toConsumableArray","map","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Header","react_default","a","createElement","className","Link","to","Component","EditarProducto","nombre","precio","error","nombreProducto","e","_this","setState","target","value","precioProducto","actualizarProducto","preventDefault","_this$state","productoEditado","props","match","params","editarProducto","history","push","this","mostrarProducto","nextProps","nextState","_nextProps$producto","_this$state2","onSubmit","defaultValue","onChange","placeholder","connect","_ref4","asyncToGenerator","regenerator_default","mark","_callee4","dispatch","respuesta","wrap","_context4","prev","next","axios","get","sent","data","stop","_x4","_ref5","_callee5","_context5","put","Swal","fire","position","title","showConfirmButton","timer","_x5","Producto","eliminarProducto","info","borrarProducto","_this$props$info","Fragment","onClick","_ref2","_callee2","_context2","delete","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","_x2","Productos","mostrarProductos","components_Producto","key","_ref","_callee","_context","_x","NuevoProducto","nuevoProducto","agregarProducto","post","_ref3","_callee3","_context3","_x3","App","es","BrowserRouter","components_Header","Switch","Route","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79d711ab.chunk.js","sourcesContent":["import { MOSTRAR_PRODUCTOS,\n         ELIMINAR_PRODUCTO,\n         AGREGAR_PRODUCTO,\n         EDITAR_PRODUCTO, \n         MOSTRAR_PRODUCTO} from '../actions/types';\n\n\nconst initialState = {\n    productos:[]\n}\n\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        // GET\n        // tomamos la respuesta del servidor y la metemos en el state\n        case MOSTRAR_PRODUCTOS:\n            return {\n                ...state,\n                productos:action.payload\n            }\n        // DELETE\n        // tomamos el id del post y lo borramos del state\n        case ELIMINAR_PRODUCTO:\n            return {\n                ...state,\n                // buscamos ese id en el state y lo borramos\n                // devolveme todos menos ese que borraste\n                productos: state.productos.filter(producto => producto.id !== action.payload)\n            }\n        // POST\n        // agregamos un producto a la base de datos\n        case AGREGAR_PRODUCTO:\n            return {\n                ...state,\n                // el action.payload viene con la informacion del post\n                productos: [...state.productos, action.payload]\n            }\n        // GET\n        // mostramos solo un producto del state\n        case MOSTRAR_PRODUCTO:\n            return{\n                ...state,\n                // en singular para que no reescriba todo el state\n                producto: action.payload\n            }\n        // PUT\n        // editamos o actualizamos la informacion del post mostrado\n        case EDITAR_PRODUCTO:\n            return{\n                ...state,\n                // recorremos todo el state\n                productos:state.productos.map(\n                    // le pasamos al state el objeto con el id a editar \n                    // si los id de ambos coinciden\n                    producto => producto.id === action.payload.id \n                        // Si hay cambios actualizamos sino se queda el post como esta\n                        ? (producto = action.payload)\n                        : producto\n                )\n            }\n        default:\n            return state;\n    }\n}","// importamos combine reducer que va uniendo los reducer segun amos agregando mas\nimport { combineReducers } from 'redux';\nimport productosReducer from './productosReducers';\n\nexport default combineReducers({\n    productos:productosReducer\n});","export const MOSTRAR_PRODUCTOS = 'MOSTRAR_PRODUCTOS';\nexport const MOSTRAR_PRODUCTO = 'MOSTRAR_PRODUCTO';\nexport const AGREGAR_PRODUCTO = 'AGREGAR_PRODUCTO';\nexport const EDITAR_PRODUCTO = 'EDITAR_PRODUCTO';\nexport const ELIMINAR_PRODUCTO = 'ELIMINAR_PRODUCTOS';","// este archivo no cambio sigue siendo el mismo siempre\nimport { createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\n// esta carpeta hay que crearla siempre o sino marca un error\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n) );\n\nexport default store;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n    state = {  }\n    render(){\n        return(\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-light justify-content-between d-flex\"> \n                <h1>\n                    <Link to={'/'} className=\"text-dark\">CRUD Redux, Fake  REST API & AXIOS</Link>\n                </h1>\n                \n                <Link to={'/productos/nuevo'} className=\"btn btn-primary nuevo-post\">\n                    Nuevo  producto \n                </Link>\n            </nav>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\n// redux \nimport { connect } from 'react-redux';\nimport { mostrarProducto, editarProducto } from '../actions/productosActions';\n\nclass EditarProducto extends Component {\n\n\n    state = {\n        nombre: '',\n        precio: '',\n        error: false\n    }\n\n    \n    componentDidMount(){\n        \n        const { id } = this.props.match.params;\n        this.props.mostrarProducto(id);\n    }\n\n    \n    componentWillReceiveProps(nextProps, nextState){\n       \n\n        const {nombre, precio } = nextProps.producto;\n        \n        this.setState({\n            nombre, \n            precio\n        });\n    }\n\n    \n    nombreProducto = e => {\n        this.setState({ nombre: e.target.value })\n    }\n\n    \n    precioProducto = e => {\n        this.setState({ precio: e.target.value })\n    }\n\n    actualizarProducto = e => {\n        \n        e.preventDefault();\n\n        \n        const {nombre, precio} = this.state;\n\n        \n        if(nombre === '' || precio === ''){\n            this.setState({ error: true });\n            return;\n        } \n        this.setState({ error:false });\n\n        const { id } = this.props.match.params;\n\n        \n        let productoEditado = {\n            id,\n            nombre,\n            precio\n        }\n        \n        this.props.editarProducto(productoEditado);\n\n        \n        this.props.history.push('/');\n    }\n\n\n    render(){\n        const {nombre, precio, error} = this.state;\n        return(\n            <div className=\"row justify-content-center mt-5\">\n                <div className=\"col-md-8\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h2 className=\"text-center\">Agregar Nuevo Producto</h2>\n                            <form onSubmit={this.actualizarProducto}>\n                                <div className=\"form-group\">\n                                    <label>Titulo</label>\n                                    <input defaultValue={nombre} onChange={this.nombreProducto} type=\"text\" className=\"form-control\" placeholder=\"Titulo\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Precio del Producto</label>\n                                    <input defaultValue={precio} onChange={this.precioProducto} type=\"text\" className=\"form-control\" placeholder=\"Precio\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary font-weight-bold text-uppercase d-block w-100\">Guardar Cambios</button>\n                            </form>\n                            {/* En caso de que el state este en true (campos del formulario vacios, le hacemos buying al usuario) */}\n                            {\n                                error && \n                                <div className=\"font-weight-bold alert alert-danger text-center mt-4\"> Campos vacios</div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// state\nconst mapStateToProps = state => ({\n    producto: state.productos.producto\n})\n\nexport default connect(mapStateToProps, { mostrarProducto, editarProducto })(EditarProducto);","import { MOSTRAR_PRODUCTOS,\n         MOSTRAR_PRODUCTO,\n         ELIMINAR_PRODUCTO,\n         AGREGAR_PRODUCTO,\n         EDITAR_PRODUCTO} from './types';\n\nimport axios from 'axios';\nimport Swal from 'sweetalert2'\n\n// GET\n// action de mostrar todos los productos\n// esta action solo sirve todos los datos\nexport const mostrarProductos = () => async dispatch => {\n    const respuesta = await axios.get('https://my-json-server.typicode.com/alej0321/productosbootcampdb/productos');\n    dispatch({\n        type: MOSTRAR_PRODUCTOS,\n        payload: respuesta.data\n    })\n}\n\n// DELETE\n\n// esta action recibe como parametro un id del post a borrar\nexport const borrarProducto = id => async dispatch => {\n    \n    await axios.delete(`https://my-json-server.typicode.com/alej0321/productosbootcampdb/productos/${id}`);\n    dispatch({\n        type: ELIMINAR_PRODUCTO,\n        payload: id\n    })\n\n    Swal.fire({\n        title: 'Está seguro de borrar el producto? ',\n        text: \"\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#00B200',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Sí, borrarlo'\n      }).then((result) => {\n        if (result.value) {\n          Swal.fire(\n            'Borrado',\n            'Tu producto ha sido borrado ',\n            'success'\n          )\n        }\n      })\n}\n\n// POST\nexport const agregarProducto = post => async dispatch => {\n    // hacemos post a la api con a info que queremos insertar\n    const respuesta = await axios.post(`https://my-json-server.typicode.com/alej0321/productosbootcampdb/productos`, post);\n    Swal.fire({\n        position: 'top-end',\n        type: 'success',\n        title: 'Producto agregado correctamente',\n        showConfirmButton: false,\n        timer: 1500\n      })\n    dispatch({\n        type: AGREGAR_PRODUCTO,\n        payload: respuesta.data\n    })\n\n}\n\n// GET\nexport const mostrarProducto = id => async dispatch => {\n    // hacemos post a la api con a info que queremos editar\n    const respuesta = await axios.get(`https://my-json-server.typicode.com/alej0321/productosbootcampdb/productos/${id}`);\n    dispatch({\n        type: MOSTRAR_PRODUCTO,\n        payload: respuesta.data\n    })\n}\n\n// PUT\n// esta accion recibe el objeto con todos los datos\nexport const editarProducto = producto => async dispatch => {\n    const respuesta = await axios.put(`https://my-json-server.typicode.com/alej0321/productosbootcampdb/productos/${producto.id}`, producto);\n    Swal.fire({\n        position: 'top-end',\n        type: 'success',\n        title: 'Producto editado correctamente',\n        showConfirmButton: false,\n        timer: 1500\n      })\n    dispatch({\n        type: EDITAR_PRODUCTO,\n        payload: respuesta.data\n    })\n}\n ","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n// redux\nimport { connect } from \"react-redux\";\nimport { borrarProducto } from \"../actions/productosActions\";\n\nclass Producto extends Component {\n  eliminarProducto = () => {\n    const { id } = this.props.info;\n    this.props.borrarProducto(id);\n  };\n\n  render() {\n    const { id, nombre, precio } = this.props.info;\n    return (\n      <React.Fragment>\n          \n        <li className=\"list-group-item\">\n          <div className=\"row justify-content-between align-items-center\">\n            <div className=\"col-md-8 d-flex justify-content-between align-items-center\">\n              <p className=\"text-dark m-0\">{id}</p>\n              <p className=\"text-dark m-0\">{nombre}</p>\n              <span className=\"badge  text-dark\">$ {precio}</span>\n            </div>\n            <div className=\"col-md-4 d-flex justify-content-end acciones\">\n              <Link\n                to={`productos/editar/${id}`}\n                className=\"btn btn-outline-warning mr-2\"\n              >\n                Editar\n              </Link>\n              <button\n                onClick={this.eliminarProducto}\n                type=\"button\"\n                className=\"btn btn-outline-danger\"\n              >\n                Borrar\n              </button>\n            </div>\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\n// state\n// no hay state porque esta función borra del state\n// entonces el mapStateToProps que null\n\nexport default connect(\n  null,\n  { borrarProducto }\n)(Producto);\n","import React, {Component} from 'react';\nimport Producto from './Producto';\nimport { connect } from 'react-redux';\nimport { mostrarProductos } from '../actions/productosActions';\n\nclass Productos extends Component{\n\n    componentDidMount(){\n        \n        this.props.mostrarProductos();\n    }\n\n    render(){\n\n        const {productos} = this.props;\n        \n        return(\n            <React.Fragment>\n                <h2 className=\"text-center my-5\">Listado de productos</h2>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-8\">\n                        <ul>\n                            {productos.map(producto => (\n                                <Producto \n                                    key={producto.id}\n                                    info={producto}\n                                />\n                            ))}\n                        </ul>\n                    </div>\n\n                </div>\n            </React.Fragment>\n        )    \n    }\n}\n\n//state\nconst mapStateToProps = state => ({\n    productos: state.productos.productos\n})\n\nexport default connect(mapStateToProps, {mostrarProductos})(Productos);","import React, {Component} from 'react';\n\n// redux \nimport { connect } from 'react-redux';\nimport { agregarProducto } from '../actions/productosActions';\n\nclass NuevoProducto extends Component {\n\n   \n    state = {\n        nombre: '',\n        precio: '',\n        error: false\n    }\n\n    \n    nombreProducto = e => {\n        this.setState({ nombre: e.target.value })\n    }\n\n    \n    precioProducto = e => {\n        this.setState({ precio: e.target.value })\n    }\n\n    editarProducto = e => {\n        // para que no recargue la página\n        e.preventDefault();\n\n        \n        const {nombre, precio} = this.state;\n\n        \n        if(nombre === '' || precio === ''){\n            this.setState({ error: true });\n            return;\n        } \n        this.setState({ error:false });\n\n        let nuevoProducto = {\n            nombre,\n            precio\n        }\n       \n        this.props.agregarProducto(nuevoProducto);\n\n       \n        this.props.history.push('/');\n    }\n\n\n    render(){\n        const {error} = this.state;\n        return(\n            <div className=\"row justify-content-center mt-5\">\n                <div className=\"col-md-8\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h2 className=\"text-center\">Agregar Nuevo Producto</h2>\n                            <form onSubmit={this.editarProducto}>\n                                <div className=\"form-group\">\n                                    <label>Titulo</label>\n                                    <input onChange={this.nombreProducto} type=\"text\" className=\"form-control\" placeholder=\"Titulo\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Precio del Producto</label>\n                                    <input onChange={this.precioProducto} type=\"number\" className=\"form-control\" placeholder=\"Precio\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary font-weight-bold text-uppercase d-block w-100\">Agregar</button>\n                            </form>\n                            {/* En caso de que el state este en true (campos del formulario vacios, le hacemos buying al usuario) */}\n                            {\n                                error && \n                                <div className=\"font-weight-bold alert alert-danger text-center mt-4\"> Campos vacios</div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { agregarProducto })(NuevoProducto);","import React, { Component } from 'react';\n\n// router\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// componentes\nimport Header from './components/Header';\nimport EditarProducto from './components/EditarProducto';\nimport Productos from './components/Productos';\nimport NuevoProducto from './components/NuevoProducto';\n\nclass App extends Component {\n  render() {\n    return (\n      //envuelvo la app en el provider de redux\n      <Provider store={store}>\n\n        {/*envuelvo todo en el router*/}\n        <Router>\n\n          <React.Fragment>\n            <Header />\n            <div className=\"container\">\n              <Switch>\n\n                <Route exact path=\"/\" component={Productos} />\n                <Route exact path=\"/productos/nuevo\" component={NuevoProducto} />\n                <Route exact path=\"/productos/editar/:id\" component={EditarProducto} />\n\n              </Switch>\n            </div>\n          </React.Fragment>\n\n\n        </Router>\n\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}